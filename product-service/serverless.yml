service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PG_HOST: '${env:PG_HOST}'
    PG_PORT: '${env:PG_PORT}'
    PG_DATABASE: '${env:PG_DATABASE}'
    PG_USERNAME: '${env:PG_USERNAME}'
    PG_PASSWORD: '${env:PG_PASSWORD}'
    DB_HOST: '${env:DB_HOST}'
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

    iamRoleStatements:
      - Effect: "Allow"
        Action: "sns:*"
        Resource:
          Ref: SNSTopic

  resources:
    Resources:
      SQSQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName: catalogItemsQueue
      SNSTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: createProductTopic
      SNSSubscription:
        Type: AWS::SNS::Subscription
        Properties:
          Endpoint: 5344208@gmail.com
          Protocol: email
          TopicArn:
            Ref: SNSTopic
          FilterPolicy:
            priceType:
              - expensive
      SNSSubscription2:
        Type: AWS::SNS::Subscription
        Properties:
          Endpoint: 5344208@gmail.com
          Protocol: email
          TopicArn:
            Ref: SNSTopic
          FilterPolicy:
            priceType:
              - inexpensive
    Outputs:
      SQSQueueUrl:
        Value:
          Ref: SQSQueue
      SQSQueueArn:
        Value:
          Fn::GetAtt: [ SQSQueue, Arn ]


functions:
  getProducts:
    handler: handler.getProducts
    events:
      - http:
          method: get
          path: products/available
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
          request:
            parameters:
              paths:
                productId: true
  addProduct:
    handler: handler.addProduct
    events:
      - http:
          method: post
          path: products
          cors: true
  invoke:
    handler: handler.invoke
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
